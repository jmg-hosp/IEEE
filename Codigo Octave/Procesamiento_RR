%Utilizado en ultimo capitulo de la tesis

carga_paquetes();
clear all;
close all;
clc;

%(4,5,7,8,9,10,11,12,18,25,26,27,28) señales ND
%(13,14,15,16,17,19,20,21,23,24) señales D
%rr=load('/home/jose/Pruebas_R/Maestria/RR_ULTRA_SHORT_1_120s_reposo_IMP_PROM/RR_12_1_120s_reposo_IMPU_PROM_ND.txt')
%rr=load('series_RR_5m_reposo_mias/RR_26_5m_ND.txt');#para dejar como ejemplo
%rr=load('series_RR_5m_reposo_mias/RR_28_5m_ND.txt');#para dejar como ejemplo
%rr=csvread('/home/jose/Risk_Doctorado_Procesar/Seniales/Validacion_BS_TS/CRC02STA-BS.csv');
%rr=csvread('/home/jose/Risk_Doctorado_Procesar/Seniales/Validacion_BS_TS/CRC01STP-BS.csv');
%rr=rr(2:end)/1000;%quito primer valor es cero y /1000 para pasar a segundos

rr=load('series_RR_5m_reposo_mias/RR_24_5m_D.txt');
%rr_300=rr;
%name="RR_28_300s_reposo_IMP_PROM_ND.mat";
%name="RR_24_300s_reposo_IMP_PROM_D.mat";

%name="CRC_14_SUP-TS.mat";

%t(1)=rr(1);
%for(i=2:length(rr))
%    t(i)= t(i-1)+rr(i-1);
%end
%t_300=t;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%determinar intervalo de calculo, de la serie
inicio = 1;% inicio en segundos
duracion = 300;%en segundos
rr=rr(inicio:duracion);
#t=t(inicio:duracion);
t=1:300;
%calculo paso.
%paso=t(end)/length(t);
%indice_inicio= round(inicio/paso); % *60para pasar a segundos
%indice_duracion= round(duracion/paso); % *60para pasar a segundos
%rr=rr(indice_inicio:indice_duracion);
%t=t(indice_inicio:indice_duracion);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
s=rr';
rr1=rr;
#name="RR_24_5m_reposo_4mSD_corr_mPROC_D.mat";
#name="RR_24_5m_reposo_mias_corr_mPROC_D.mat";

perLimit=30;% porcentanje para filtro ectopics
sdLimit=4;#3;
tau=4;
filtro_detector='impulso'; #cambiar usuario
interpolacion='mediana';   #cambiar usuario
Ll=1; %retrazo elegido para Poincare
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Funciones deteccion outliers medianFilter
outliers=false(length(s),1); %preallocate
switch filtro_detector
    case 'impulso' 
        sM=median(s);
        med=median(abs(s-sM));
        D=abs(s-sM)./(1.483*med);
        outliers=D>tau;
    case 'porcentaje_cambio'
        perLimit=perLimit/100;
        pChange=abs(diff(s))./s(1:end-1); %porcntaje de cambio
        outliers(2:end) = (pChange >perLimit);
    case 'sd'
        s=detrend(s,'linear');
        mu = mean(s); %media
        sigma = std(s); %desviacion estandard 
        n = length(s);
        MeanMat = repmat(mu,n,1);
        SigmaMat = repmat(sigma,n,1);
        outliers = abs(s-MeanMat) > sdLimit*SigmaMat;
end
   

figure(100);
fig1=figure(100); 
plot(t,rr,'k','LineWidth', 1.5);
%axis([0 300 0.4 2.5]);
set(gca, 'FontSize', 18, 'LineWidth', 1.5);
xlabel('Tiempo [s]','fontsize',18,'fontweight','b')
ylabel('RR [s]','fontsize',18,'fontweight','b')
%print(fig100,'rr_outliers','-dpng','-r600','-color')
   
figure(1);
fig1=figure(1); 
plot(t,rr,'k','LineWidth', 1.5);
hold on
%title(['Serie RR y Artefactos'])
plot(t(outliers),rr(outliers),'ro','LineWidth', 1.5);
hold off
%axis([0 300 0.4 2.5]);
set(gca, 'FontSize', 18, 'LineWidth', 1.5);
xlabel('Tiempo [s]','fontsize',18,'fontweight','b')
ylabel('RR [s]','fontsize',18,'fontweight','b')
print(fig1,'rr_outliers','-dpng','-r600','-color')

%Aplicando diferentes metodos de INTERPOLACION
switch interpolacion
    case 'promedio' 
        y2=rr; 
        t2=t;
        opt1=11;#7;anterior
        l=length(rr); 
        if ~isnan(opt1) 
            m=floor((opt1-1)/2); %calculaancho media ventana
        end
        i=find(outliers); %indece localizacion outliers                      
        i=(i(i>m+1 & i<l-m))'; 
        rr(i)=nan;
        for n=i;
            tmpy=rr(n-m:n+m);
            y2(n)=mean(tmpy(~isnan(tmpy)));
        end
        #t2=t;
      case 'eliminar'
        y2=rr';
        t2=t';
        y2(outliers,:) = [];
        t2(outliers,:) = [];
      case 'mediana' 
        y2=rr; 
        t2=t;
        opt1=11;#7;anterior
        l=length(rr); %
        if ~isnan(opt1) 
            m=floor((opt1-1)/2); 
        end
        i=find(outliers);                       
        i=(i(i>m+1 & i<l-m))'; 
        rr(i)=nan;
        for n=i;
            tmpy=rr(n-m:n+m);
            y2(n)=median(tmpy(~isnan(tmpy)));
        end
  
end
fig2=figure(2); 
plot(t,rr1,'r--','LineWidth', 1.5);
hold on
plot(t2,y2,'k','LineWidth', 1.5);
hold off 
%axis([0 300 0.4 2.5]);
set(gca, 'FontSize', 18, 'LineWidth', 1.5);
xlabel('Tiempo [s]','fontsize',18,'fontweight','b')
ylabel('RR [s]','fontsize',18,'fontweight','b')
print(fig2,'rr_outliers_marcado','-dpng','-r600','-color')

#save(name,'y2','-ascii');
%NUMERO_OUTLIERS=length(find(outliers)) 

rr_c= y2;
ts=t2;

fig3=figure(3);
plot(ts,rr_c, 'k','LineWidth', 1.5);
%axis([0 300 0.4 1.6]);
set(gca, 'FontSize', 18, 'LineWidth', 1.5);
xlabel('Tiempo [s]','fontsize',18,'fontweight','b')
ylabel('RR [s]','fontsize',18,'fontweight','b')
print(fig3,'rr_filtrado','-dpng','-r600','-color')
% hold on
% plot(ts(outliers),rr_c(outliers),'r*');
% hold on
% plot(ts(outliers1),rr_c(outliers1),'k*');
% hold off
% title(['Serie NN'])
% %Detrending linea de base
% 
rr_cd= rr_c-mean(rr_c);% detrending dc
rr_cd = detrend(rr_c,'linear');% detrending dc+lineal

fig4=figure(4);
plot(ts,rr_cd, 'k','LineWidth', 1.5);
axis([0 300 -0.25 0.25]);
set(gca, 'FontSize', 18, 'LineWidth', 1.5);
xlabel('Tiempo [s]','fontsize',18,'fontweight','b')
ylabel('RR [s]','fontsize',18,'fontweight','b')
print(fig4,'rr_detrend','-dpng','-r600','-color')
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% save RR_24_5m_pre_D.txt rr_cd -ascii;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% figure(3);
% plot(ts,rr_cd);
% title(['Serie NN con detrending'])
% %Analisis dominio temporal
% 
ibi=rr_c*1000;%paso a ms
x=50;
%STD de la serie RR
mean_RR=mean(rr_c)*1000; %media en ms, serie RR
HR=1./rr_c;
mean_HR=mean(HR*60); %media serie HR
SDNN=std(ibi);
SDHR=std(HR*60);
CV_RR=SDNN/mean_RR*100; %coeficiente de variacion 
%function [p n] = pNNx(ibi,x)
%pNNx: percentage of successive/adjacent NN intervals differing by x (ms) 
%or more
differences=abs(diff(ibi)); %successive ibi diffs (ms)    
n=sum(differences>x);
p=(n/length(differences))*100;
% end
NNx=n;
pNNx=p;
% function output = RMSSD(ibi)
%RMSSD: root mean square of successive RR differences
differences=abs(diff(ibi)); %successive ibi diffs 
output=sqrt(sum(differences.^2)/length(differences));
% end
rMSSD=output;
ln_rMSSD=log(rMSSD);

%Analisi frecuencial, calculos potencias
%Periodograma de Lomb

[flrr, Psdlrrn] = lomb(ts', rr_cd,4,1);
Psdlrr=Psdlrrn*2*var(rr_cd);%des normalizo
[PTlrr,VLFlrr,LFlrr,HFlrr,rLFHFlrr] = calculo_potencias_ms2_integral(flrr,Psdlrr)
[PTlrrun,LFlrrun,HFlrrun] = calculo_pot_normalizadas(PTlrr,VLFlrr,LFlrr,HFlrr)

fig6=figure(6);
plot(flrr,Psdlrr,'LineWidth', 1.5);
title(['Lomb'])
axis([0 0.5 0 0.02]);
set(gca, 'FontSize', 18, 'LineWidth', 1.5);
xlabel('Frecuencia [Hz]','fontsize',18,'fontweight','b')
ylabel('PSD [s^2/Hz]','fontsize',18,'fontweight','b')
print(fig6,'Lomb','-dpng','-r600','-color')

%Poincare retrazado
%Ll=1;%retrazo elegido
xi=rr_cd*1000;
x=xi(1:length(xi)-Ll);
%y=rr_c*1000;
y=xi(Ll+1:length(xi));

fig5=figure(5);
plot(x,y, 'r+','LineWidth', 1.5);
%axis([-200 200 -200 200]);
axis([-300 300 -300 300]);
set(gca, 'FontSize', 18, 'LineWidth', 1.5);
xlabel('RRn [ms]','fontsize',18,'fontweight','b')
ylabel('RRn+i [ms]','fontsize',18,'fontweight','b')
print(fig5,'poincare','-dpng','-r600','-color')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
x1=(x-y)/sqrt(2);
x2=(x+y)/sqrt(2);
SD1=std(x1);
SD2=std(x2);
SD12=SD1/SD2;
SD21=SD2/SD1;
SDRR=(sqrt(SD1^2+SD2^2))/sqrt(2);
S=pi*SD1*SD2;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Stress Score
SS=1000/SD2;
SPS=SS/SD1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%Analisis de simetria
xrr=rr_cd*1000;
yrr=xrr;
xrr(end)=[];
yrr(1)=[];
D=abs(xrr-yrr)/sqrt(2);
lD=length(D);
sumD=sum(D.^2);
j=1;
for(i=1:lD-2)
    if((xrr(i+2)>xrr(i+1)& xrr(i+1)>xrr(i))|(xrr(i+2)>xrr(i+1)& xrr(i+1)>=xrr(i))|(xrr(i+2)>=xrr(i+1)& xrr(i+1)<xrr(i)))
        j=j+1;
    end
end

for(i=1:j)
    Di(i)=(abs(xrr(i)-yrr(i))/sqrt(2))^2;
end    
sumDi=sum(Di');

GIp=sumDi/sumD*100;

%Calculo Simetria de Poincare
L = length(x);
SD1C = sqrt((1/L)*sum(((x - y) - mean(x - y)).^2)/2);
SD2C = sqrt((1/L)*sum(((x + y) - mean(x + y)).^2)/2);
SD1I = sqrt((1/L)*(sum((x - y).^2)/2));
xy = (x-y)/sqrt(2);
indices_up = find(xy > 0);
indices_down = find(xy < 0);
SD1UP = sqrt(sum(xy(indices_up).^2)/L);
SD1DOWN = sqrt(sum(xy(indices_down).^2)/L);
CUP = SD1UP^2/SD1I^2; %desaceleracion
CDOWN = SD1DOWN^2/SD1I^2;%aceleracion
pCUP=CUP*100;
pCDOWN=CDOWN*100;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%save ("-mat7-binary", name,'mean_RR','mean_HR', 'SDNN', 'SDHR',...
%'CV_RR', 'pNNx', 'rMSSD', 'ln_rMSSD','PTlrr','VLFlrr','LFlrr','HFlrr',...
%'rLFHFlrr','LFlrrun','HFlrrun','SD1','SD2','SD12','SD21','SDRR','S','SS',...
%'SPS','GIp','SD1UP','SD1DOWN','CUP','CDOWN');


